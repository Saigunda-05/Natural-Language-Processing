# -*- coding: utf-8 -*-
"""Fwd: SJ-092

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c7vI-LSQ_D3CGzd1nMnB_qHhQMmob8IF
"""

import numpy as np # linear algebra
import pandas as pd

import pandas as pd
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

from google.colab import files

# Step 1: Upload the file
uploaded = files.upload()

# STEP 2: Import pandas and load the txt file
import pandas as pd

# Replace 'yourfile.txt' with the actual file name you uploaded
df = pd.read_csv('/content/SemEval2017-task4-dev.subtask-A.english.INPUT.txt', sep='\t', header=None, names=['tweet_id', 'sentiment', 'tweet_text'])

# Preview the data
df.head()

# Step 2: Load the uploaded file
filename = next(iter(uploaded))

# Try reading as tab-separated (if that's what your file uses)
df = pd.read_csv(
    filename,
    sep='\t',               # Use '\t' for tab-separated files, ',' for CSV
    quotechar='"',          # Handle quoted fields properly
    quoting=3,              # 0 = QUOTE_MINIMAL, 1 = QUOTE_ALL, 2 = QUOTE_NONNUMERIC, 3 = QUOTE_NONE
    engine='python'         # More tolerant parsing
)

# Step 3: Preview data
df.head()

# Step 2: Read the file and clean it
df = pd.read_csv(
    filename,
    sep='\t',               # Use '\t' for tab-separated
    header=None,            # Don't assume first row is header
    names=['tweet_id', 'sentiment', 'tweet_text'],  # Assign correct column names
    usecols=[0, 1, 2],      # Only use first 3 columns
    engine='python'         # Tolerant parsing
)

# Step 3: Preview clean DataFrame
df.head()

def clean_text(text):
    text = text.lower()
    text = re.sub(f"[{string.punctuation}]", "", text)
    text = re.sub(r"\d+", "", text)
    text = text.strip()
    return text

df['clean_tweet'] = df['tweet_text'].apply(clean_text)

print(df['clean_tweet'].head())

def clean_text(text):
    text = text.lower()
    text = re.sub(f"[{string.punctuation}]", "", text)
    text = re.sub(r"\d+", "", text)
    text = text.strip()
    return text

df['clean_tweet'] = df['tweet_text'].apply(clean_text)

text = " ".join(df['clean_tweet'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('tweets word cloud', fontsize=16)
plt.show()

tweets_df.describe()

X = df['clean_tweet']
y = df['sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, y_train)

y_pred = model.predict(X_test_tfidf)

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f"accuracy: {accuracy}")
print(f"classify report:\n {classification_rep}")

# evalueate
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred, output_dict=True)

precision = classification_rep['macro avg']['precision']
recall = classification_rep['macro avg']['recall']
f1 = classification_rep['macro avg']['f1-score']

# output
print(f"accuracy: {accuracy}")
print(f"classifier report:\n {classification_rep}")

plt.figure(figsize=(8, 6))
plt.pie([precision, recall, f1], labels=['Precision', 'Recall', 'F1-Score'], autopct='%1.1f%%', colors=['#66b3b7', '#99cc99', '#ffcc99'])
plt.title('evalueate model', fontsize=14)
plt.show()

